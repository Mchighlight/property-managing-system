/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.FinanceCompany;

import ui.PropertyCompany.tenant.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.AccountingOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SignLeaseRequest;
import Business.property.Rent;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javafx.application.Platform;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author junyaoli
 */
public class ApartmentReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form customerServiceJPanel
     */
     JPanel userProcessContainer;
    UserAccount ua;
    EcoSystem ecosystem;
    Enterprise enterprise ;
    private AccountingOrganization organization;
    
    public ApartmentReportJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem business, Enterprise enterprise, AccountingOrganization organization) {
         initComponents();
         this.ecosystem=business;
         this.ua = account;
         this. userProcessContainer = userProcessContainer;
         this.enterprise = enterprise;
         this.organization = organization ;
         
         for (Network network : ecosystem.getNetworkList()) {
            NetWorkCombobox.addItem(network.getName());
        } // for
    } // Constructor

    
    public void populatEnterpriseCombo(String net) {
        EnterpriseCombobox.removeAllItems();
        for (Enterprise enterprise : ecosystem.findNetwork(net).getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise.getEnterpriseType().getValue().equals(Enterprise.EnterpriseType.RealEstate.getValue())) {
                EnterpriseCombobox.addItem(enterprise);
            } // if
        } // for
    } // populatEnterpriseCombo
    
    /*
    public void populateOrganizationCombo(Enterprise ept) {
        OrganizationCombobox.removeAllItems();
        for (Organization og : ept.getOrganizationDirectory().getOrganizationList()) {
            System.out.println();
            if (og.getOrganizationType().getValue().equals(Organization.Type.Agent.getValue())) {
                OrganizationCombobox.addItem(og.getName());
            } // if
        } // for
    } // populateOrganizationCombo
    */
     public  String dateToString(Date date){
         DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");  
         String strDate = dateFormat.format(date);  
         return strDate ;
   }
    
    public void populateAptTable(SignLeaseRequest slr) {

        DefaultTableModel model = (DefaultTableModel) ApartmentJTable.getModel();
        model.setRowCount(0);
        if( slr.getLease() != null ){
            if( slr.getLease().getRentList().size() == 0 ){
                Object row[] = new Object[5];
                row[0] = slr ;
                row[2] = slr.getLease().getBuilding().getMonthlyrent();
                row[4] = slr.getTenant();
                row[5] = slr.getAgent();
                model.addRow(row);
            } // if
            else {
                for( Rent rent : slr.getLease().getRentList() ){
                    Object row[] = new Object[6];
                    row[0] = slr ;
                    row[1] = dateToString(rent.getDateToPay()) ;
                    row[2] = slr.getLease().getBuilding().getMonthlyrent();
                    row[3] = rent.getPayment().getPayMethod() ;
                    row[4] = slr.getTenant();
                    row[5] = slr.getAgent();
                    model.addRow(row);
                } // for
            } // else
        } // if
    }

    public void populateApartmentCombo( Enterprise enter) {
        ApartmentCombobox.removeAllItems();
        Organization org = enter.getOrganizationDirectory().findorganization("Leasing Organization");
        if (org.getRealEstateAgentDirectory().getRealEstateAgentList() != null) {
            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                if (ua.getLeasing() != null ){
                    for(  SignLeaseRequest slr : ua.getWorkQueue().getSignLeaseRequestList() ){
                        ApartmentCombobox.addItem(slr);
                    } //for                                      
                } // if                   
            } // for
        } // if
    } // populateApartmentCombo
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        ApartmentJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        ApartmentCombobox = new javax.swing.JComboBox<>();
        NetWorkCombobox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        EnterpriseCombobox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        backJButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();

        setLayout(null);

        ApartmentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Apartment", "Rental Date", "Rent Price", "Payment Method", "Tenant", "Agent"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ApartmentJTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(10, 74, 880, 229);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Apartment Report");
        add(jLabel5);
        jLabel5.setBounds(360, 20, 195, 22);

        ApartmentCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApartmentComboboxActionPerformed(evt);
            }
        });
        add(ApartmentCombobox);
        ApartmentCombobox.setBounds(443, 399, 144, 18);

        NetWorkCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NetWorkComboboxActionPerformed(evt);
            }
        });
        add(NetWorkCombobox);
        NetWorkCombobox.setBounds(444, 315, 142, 27);

        jLabel4.setText("Network");
        add(jLabel4);
        jLabel4.setBounds(359, 319, 53, 16);

        jLabel6.setText("Enterprise");
        add(jLabel6);
        jLabel6.setBounds(359, 358, 63, 16);

        EnterpriseCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterpriseComboboxActionPerformed(evt);
            }
        });
        add(EnterpriseCombobox);
        EnterpriseCombobox.setBounds(444, 354, 142, 27);

        jLabel7.setText("Apartment");
        jLabel7.setToolTipText("");
        add(jLabel7);
        jLabel7.setBounds(359, 399, 66, 16);

        backJButton1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-back-arrow-100.png"))); // NOI18N
        backJButton1.setToolTipText("");
        backJButton1.setBorderPainted(false);
        backJButton1.setContentAreaFilled(false);
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        add(backJButton1);
        backJButton1.setBounds(133, 6, 57, 29);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back.jpg"))); // NOI18N
        jLabel8.setText("jLabel4");
        add(jLabel8);
        jLabel8.setBounds(5, -4, 930, 710);
    }// </editor-fold>//GEN-END:initComponents

    private void ApartmentComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApartmentComboboxActionPerformed
        SignLeaseRequest slr = (SignLeaseRequest)ApartmentCombobox.getSelectedItem() ;      
        if (slr != null) {
            populateAptTable(slr);
        }
    }//GEN-LAST:event_ApartmentComboboxActionPerformed

    private void NetWorkComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NetWorkComboboxActionPerformed
        // TODO add your handling code here:
        String network = NetWorkCombobox.getSelectedItem().toString();
        if (network != null) {
            populatEnterpriseCombo(network);
        }
    }//GEN-LAST:event_NetWorkComboboxActionPerformed

    private void EnterpriseComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterpriseComboboxActionPerformed
        Enterprise enter = (Enterprise) EnterpriseCombobox.getSelectedItem();
        if (enter != null) {
            populateApartmentCombo(enter) ;
        } // if
        
    }//GEN-LAST:event_EnterpriseComboboxActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        CardLayout layout =  (CardLayout)userProcessContainer.getLayout();
        userProcessContainer.add(new AccountantWorkAreaJPanel(userProcessContainer,  this.ua,  organization,   enterprise, ecosystem));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Object> ApartmentCombobox;
    private javax.swing.JTable ApartmentJTable;
    private javax.swing.JComboBox<Object> EnterpriseCombobox;
    private javax.swing.JComboBox<String> NetWorkCombobox;
    private javax.swing.JButton backJButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
