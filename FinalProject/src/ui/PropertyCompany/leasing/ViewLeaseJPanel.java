/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PropertyCompany.leasing;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.LeasingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.SignLeaseRequest;
import Business.property.Lease;
import Business.property.Rent;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author junyaoli
 */
public class ViewLeaseJPanel extends javax.swing.JPanel {

    /**
     * Creates new form customerServiceJPanel
     */
     JPanel userProcessContainer;
    UserAccount ua;
    EcoSystem ecosystem;
    LeasingOrganization leaseOrganization;
    Enterprise enterprise;
    
    public ViewLeaseJPanel(JPanel userProcessContainer, UserAccount account, LeasingOrganization leaseOrganization, Enterprise enterprise, EcoSystem business) {
         initComponents();
         btnDecline.setVisible(false);
         this. userProcessContainer = userProcessContainer;
         this.ua = account;
         this.leaseOrganization = leaseOrganization;
         this.enterprise = enterprise ;
         this.ecosystem=business;
       
         populateRequestTable();
    }

    
     public void populateRequestTable() {

        DefaultTableModel dtm = (DefaultTableModel) workRequestJTable.getModel();
        dtm.setRowCount(0);
        ArrayList<SignLeaseRequest> work = this.ua.getWorkQueue().getSignLeaseRequestList();

        if (work != null) {
            for (SignLeaseRequest s: work) {
                if(  ! s.getStatus().equals("Termination") && ! s.getStatus().equals("Renewal Request")  && ! s.getStatus().equals("Renewal Reviewing")) {
                    Object row[] = new Object[7];
                    row[0] = s.getOrderID();
                    row[1] = s.getTenant().getUsername();
                    row[2] = s.getBuilding().toString();
                    if ( s.getLease() == null )
                         row[3] = "Leasing in progress";
                    else
                        if( s.getLease().getBalance() == null )
                            row[3] = "Wating for Payment";
                        else
                            row[3] = s.getLease().toString();

                    row[4] = s.getStatus() ;
                    dtm.addRow(row);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "null");
        }

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btnDecline = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        btnPaymentRequest = new javax.swing.JButton();
        btnViewDetail = new javax.swing.JButton();
        btnPaymentReview = new javax.swing.JButton();
        backJButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setLayout(null);

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "OrderId", "Tenant", "apartment", "Lease Balance", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(10, 60, 890, 230);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel5.setText("Lease Collection");
        add(jLabel5);
        jLabel5.setBounds(380, 10, 159, 22);

        btnDecline.setText("Decline");
        btnDecline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeclineActionPerformed(evt);
            }
        });
        add(btnDecline);
        btnDecline.setBounds(10, 380, 140, 60);

        btnAccept.setText("Leasing Review");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        add(btnAccept);
        btnAccept.setBounds(160, 300, 150, 60);

        btnPaymentRequest.setText("Payment Request");
        btnPaymentRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentRequestActionPerformed(evt);
            }
        });
        add(btnPaymentRequest);
        btnPaymentRequest.setBounds(350, 300, 150, 60);

        btnViewDetail.setText("View Detail");
        btnViewDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailActionPerformed(evt);
            }
        });
        add(btnViewDetail);
        btnViewDetail.setBounds(790, 20, 90, 23);

        btnPaymentReview.setText("Payment Review");
        btnPaymentReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentReviewActionPerformed(evt);
            }
        });
        add(btnPaymentReview);
        btnPaymentReview.setBounds(540, 300, 140, 60);

        backJButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back-arrow.png"))); // NOI18N
        backJButton2.setBorderPainted(false);
        backJButton2.setContentAreaFilled(false);
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });
        add(backJButton2);
        backJButton2.setBounds(10, 10, 60, 50);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/back.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4);
        jLabel4.setBounds(0, 0, 930, 710);
    }// </editor-fold>//GEN-END:initComponents

     public static Date firstDayOfNextMonth() {
            LocalDateTime now = LocalDateTime.now();
            int year = now.getYear();
            int month = now.getMonthValue();
            int day = now.getDayOfMonth();  
            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.YEAR, year);
            cal.set(Calendar.MONTH, month);
            cal.set(Calendar.DAY_OF_MONTH, 1);
            Date dueDate = new Date(cal.getTimeInMillis());
        return dueDate;
    }
    
    private Lease buildLease(SignLeaseRequest slr){
        Lease lease = new Lease() ;
        // Lease Start  Day
        Date leaseStartDate = firstDayOfNextMonth();
        lease.setStartDate(leaseStartDate);
        // Lease End Day
        Calendar cal=Calendar.getInstance();
        cal.setTime(leaseStartDate);
        cal.set(Calendar.MONTH,leaseStartDate.getMonth()+1);
        Date leaseEndDate =  cal.getTime() ;
        lease.setEndDate(leaseEndDate);
        // Info
        lease.setBalance(Double.valueOf(0));
        lease.setSecurityDeposit(Double.valueOf(400));
        lease.setBuilding(slr.getBuilding());
        lease.setTenant(slr.getTenant());
        lease.setLeasing(slr.getLeasing());
        lease.setRentalDate(leaseStartDate);
        
        return lease ;
    }
    
    private void btnDeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeclineActionPerformed
        // TODO add your handling code here:

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            return;
        }
        int orderId = Integer.parseInt(workRequestJTable.getValueAt(row, 0).toString());
        String tenantName = workRequestJTable.getValueAt(row, 1).toString() ;
        SignLeaseRequest selectedSlr =  this.ua.getWorkQueue().findSignLeaseRequest(orderId) ;
       String status = workRequestJTable.getValueAt(row, 4).toString() ;
        if( status.equals("Decline") ){
             JOptionPane.showMessageDialog(null, "Leasing had been Declined!", "Info", JOptionPane.INFORMATION_MESSAGE);
             return ;
        } // if
        selectedSlr.setStatus("Decline");            
        JOptionPane.showMessageDialog(null, "Status updated! Decline Tenant Leasing", "Info", JOptionPane.INFORMATION_MESSAGE);
        populateRequestTable();
    }//GEN-LAST:event_btnDeclineActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            return;
        }
        int orderId = Integer.parseInt(workRequestJTable.getValueAt(row, 0).toString());
        String tenantName = workRequestJTable.getValueAt(row, 1).toString() ;
        SignLeaseRequest selectedSlr =  this.ua.getWorkQueue().findSignLeaseRequest(orderId) ;
        String status = workRequestJTable.getValueAt(row, 4).toString() ;
        if( status.equals("Payment Reviewing") ){
             JOptionPane.showMessageDialog(null, "Tenant payment is under reviewing, please select Payment Reviewing button!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // if
        else if (  status.equals("Decline") ){
            JOptionPane.showMessageDialog(null, "Tenant Leasing is declined!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else if ( status.equals("Payment Request") ){
             JOptionPane.showMessageDialog(null, "Leasing is finished requested. Waiting for customer's payment!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else if ( status.equals("Payment Completed") || status.equals("Contract preparation") ){
            if(selectedSlr.getLease() == null){
                selectedSlr.setLease(this.buildLease(selectedSlr));
            } // if
            else{
                ArrayList<Rent> rents = selectedSlr.getLease().getRentList() ;
                Rent currentRent  = rents.get(rents.size()-1);
                if( currentRent.getDate().after(selectedSlr.getLease().getEndDate()) ||
                     currentRent.getDate().equals(selectedSlr.getLease().getEndDate())  ){
                    JOptionPane.showMessageDialog(null, "Rent is Expired Need to Terminate or Renew", "Info", JOptionPane.INFORMATION_MESSAGE);
                    return;
                } // if
              } // else
                selectedSlr.setStatus("Accepted");
                JOptionPane.showMessageDialog(null, "Status updated! Please click Payment Request to request further payment", "Info", JOptionPane.INFORMATION_MESSAGE);
                populateRequestTable();
            } // else if
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnPaymentRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentRequestActionPerformed
        // TODO add your handling code here:

        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            return;
        }
        int orderId = Integer.parseInt(workRequestJTable.getValueAt(row, 0).toString());
        String tenantName = workRequestJTable.getValueAt(row, 1).toString() ;
        SignLeaseRequest selectedSlr =  this.ua.getWorkQueue().findSignLeaseRequest(orderId) ;
        String status = workRequestJTable.getValueAt(row, 4).toString() ;
        if( status.equals("Accepted") ){
            selectedSlr.setStatus("Payment Request");
            JOptionPane.showMessageDialog(null, "Status updated!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }//if
        else if ( status.equals("Payment Request") ){
             JOptionPane.showMessageDialog(null, "Tenant had received Payment Request!", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else if ( status.equals("Decline") ){
             JOptionPane.showMessageDialog(null, "Lease had been declined !", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else{
            JOptionPane.showMessageDialog(null, "Reviewing the lease first then request payment", "Info", JOptionPane.INFORMATION_MESSAGE);
        }            
        populateRequestTable();
    }//GEN-LAST:event_btnPaymentRequestActionPerformed

    private void btnViewDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailActionPerformed
        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please selected the lease!", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int orderId = Integer.parseInt(workRequestJTable.getValueAt(row, 0).toString());
        SignLeaseRequest selectedSlr =  this.ua.getWorkQueue().findSignLeaseRequest(orderId) ;
        String status = workRequestJTable.getValueAt(row, 4).toString() ;
        if( ! status.equals("Decline")  && ! status.equals("Contract preparation") ){
            CardLayout layout =  (CardLayout)userProcessContainer.getLayout();
            userProcessContainer.add(new DetailLeaseJPanel( userProcessContainer,  ua,  leaseOrganization,  enterprise, ecosystem, selectedSlr, "ViewLease") );
            layout.next(userProcessContainer);
        }//
        else if ( status.equals("Decline") ){
             JOptionPane.showMessageDialog(null, "Lease had been declined !", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else if ( status.equals("Contract preparation") ){
             JOptionPane.showMessageDialog(null, "Tenant's contract need to be reviewed !", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else{
            JOptionPane.showMessageDialog(null, "Your Leasing are not aprroved yet!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnViewDetailActionPerformed

    private void btnPaymentReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentReviewActionPerformed
        int row = workRequestJTable.getSelectedRow();
        if (row < 0) {
            return;
        }
        int orderId = Integer.parseInt(workRequestJTable.getValueAt(row, 0).toString());
        SignLeaseRequest selectedSlr =  this.ua.getWorkQueue().findSignLeaseRequest(orderId) ;
        String status = workRequestJTable.getValueAt(row, 4).toString() ;
        if( status.equals("Payment Reviewing")  ){ // status.equals("Payment Review")
            CardLayout layout =  (CardLayout)userProcessContainer.getLayout();
            userProcessContainer.add(new PaymentReviewJPanel( userProcessContainer,  ua,  leaseOrganization,  enterprise, ecosystem,  selectedSlr) );
            layout.next(userProcessContainer);
        }//
        else if ( status.equals("Decline") ){
             JOptionPane.showMessageDialog(null, "Lease had been declined !", "Info", JOptionPane.INFORMATION_MESSAGE);
        } // else if
        else{
            JOptionPane.showMessageDialog(null, "Your Leasing are not aprroved yet!", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnPaymentReviewActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        CardLayout layout =  (CardLayout)userProcessContainer.getLayout();
        userProcessContainer.add(new LeasingWorkAreaJPanel(userProcessContainer,  ua,  leaseOrganization,  enterprise, ecosystem));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton2;
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnDecline;
    private javax.swing.JButton btnPaymentRequest;
    private javax.swing.JButton btnPaymentReview;
    private javax.swing.JButton btnViewDetail;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
