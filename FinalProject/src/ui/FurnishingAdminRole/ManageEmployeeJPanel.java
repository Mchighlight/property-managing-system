/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.FurnishingAdminRole;

import Business.EcoSystem;
import ui.FinanceAdminRole.*;
import Business.Employee.Accountant;
import Business.Employee.CleaningStaff;
import Business.Employee.Decorator;
import Business.Employee.Employee;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Role.AccountantRole;
import Business.Role.CleaningStaffRole;
import Business.Role.DecoratorRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yiningchen
 */
public class ManageEmployeeJPanel extends javax.swing.JPanel {

    private OrganizationDirectory organizationDir;
    private JPanel userProcessContainer;

    /**
     * Creates new form ManageEmployeeJPanel
     */
    public ManageEmployeeJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDir, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organizationDir = organizationDir;
        populateOrganizationComboBox();

    }

    public void populateOrganizationComboBox() {
        organizationJComboBox.removeAllItems();

        for (Organization organization : organizationDir.getOrganizationList()) {
            organizationJComboBox.addItem(organization);
        }
    }

    private void populateCleaningTable(Organization organization) {
        DefaultTableModel model = (DefaultTableModel) organizationJTable.getModel();

        model.setRowCount(0);

        for (CleaningStaff cleaningstaff : organization.getCleaningStaffDirectory().getCleaningStaffList()) {
            Object[] row = new Object[4];
            row[0] = cleaningstaff.getId();
            row[1] = cleaningstaff.getName();
            row[2] = cleaningstaff.getEmail();
            row[3] = cleaningstaff.getChargepresquarefee();

            model.addRow(row);
        }
    }

    private void populateDecoratorTable(Organization organization) {
        DefaultTableModel model = (DefaultTableModel) organizationJTable.getModel();

        model.setRowCount(0);

        for (Decorator decorator : organization.getDecoratorDirectory().getDecoratorList()) {
            Object[] row = new Object[4];
            row[0] = decorator.getId();
            row[1] = decorator.getName();
            row[2] = decorator.getEmail();
            row[3] = decorator.getFeepersquarefeet();

            model.addRow(row);
        }
    }

    private boolean emailPatternCorrect() {
        Pattern p = Pattern.compile("^[a-zA-Z0-9]+@[a-zA-Z0-9]+.[a-zA-Z0-9]+$");
        Matcher m = p.matcher(txtemail.getText());
        boolean b = m.matches();
        return b;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addJButton = new javax.swing.JButton();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        organizationJTable = new javax.swing.JTable();
        txtemail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtpassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtcharge = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        backJButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(null);

        addJButton.setText("Create Employee");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        add(addJButton);
        addJButton.setBounds(330, 400, 148, 58);

        organizationJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });
        add(organizationJComboBox);
        organizationJComboBox.setBounds(354, 19, 224, 27);

        jLabel1.setText("Organization");
        add(jLabel1);
        jLabel1.setBounds(267, 23, 81, 16);

        organizationJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "email", "Charge pre Square feet"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(organizationJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(200, 70, 530, 120);

        txtemail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtemailActionPerformed(evt);
            }
        });
        add(txtemail);
        txtemail.setBounds(510, 300, 126, 26);

        jLabel4.setText("email");
        add(jLabel4);
        jLabel4.setBounds(340, 310, 34, 16);

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });
        add(txtUsername);
        txtUsername.setBounds(510, 240, 126, 26);
        add(txtpassword);
        txtpassword.setBounds(510, 270, 126, 26);

        jLabel5.setText("Username");
        add(jLabel5);
        jLabel5.setBounds(340, 250, 62, 16);

        jLabel6.setText("password");
        add(jLabel6);
        jLabel6.setBounds(340, 280, 60, 16);

        jLabel7.setText("Charge per square foot");
        add(jLabel7);
        jLabel7.setBounds(340, 340, 144, 16);

        txtcharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtchargeActionPerformed(evt);
            }
        });
        add(txtcharge);
        txtcharge.setBounds(510, 330, 126, 26);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(510, 400, 126, 58);

        backJButton1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        backJButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-back-arrow-100.png"))); // NOI18N
        backJButton1.setToolTipText("");
        backJButton1.setBorderPainted(false);
        backJButton1.setContentAreaFilled(false);
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        add(backJButton1);
        backJButton1.setBounds(148, 0, 57, 62);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/furniture-min.jpg"))); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(0, 0, 1200, 700);
    }// </editor-fold>//GEN-END:initComponents

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        Organization organization = (Organization) organizationJComboBox.getSelectedItem();

        String email = txtemail.getText();
        String Username = txtUsername.getText();
        String password = txtpassword.getText();
        String fee = txtcharge.getText();
        int chargefee = Integer.parseInt(txtcharge.getText());
        if (password.equals("") || Username.equals("") || email.equals("") || fee.equals("")) {
            JOptionPane.showMessageDialog(null, "Input can not be empty", "Warning", JOptionPane.ERROR_MESSAGE);
        } else if (chargefee <= 0) {
            JOptionPane.showMessageDialog(null, "charge fee per square feet should not be smaller than zero", "Warning", JOptionPane.ERROR_MESSAGE);

        } else if (!organization.getUserAccountDirectory().checkIfUsernameIsUnique(Username)) {
            JOptionPane.showMessageDialog(null, "Username must be unique", "Warning", JOptionPane.ERROR_MESSAGE);

        } else if (!emailPatternCorrect()) {
            txtemail.setBorder(BorderFactory.createLineBorder(Color.RED));
            jLabel4.setForeground(Color.red);
            JOptionPane.showMessageDialog(null, "Please enter valid Username in the format of xx@xx.xx", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {
            if (organizationJComboBox.getSelectedItem().toString().equals(Organization.Type.Cleaning.getValue())) {

                CleaningStaff cleaningStaff = organization.getCleaningStaffDirectory().createCleaningStaff(Username, email, chargefee);
                organization.getUserAccountDirectory().createUserAccount(Username, password, cleaningStaff, new CleaningStaffRole());
                JOptionPane.showMessageDialog(null, " Cleaning staff added,user added");

                populateCleaningTable(organization);
            } else if (organizationJComboBox.getSelectedItem().toString().equals(Organization.Type.Furnishing.getValue())) {

                Decorator decorator = organization.getDecoratorDirectory().createDecorator(Username, email, chargefee);
                organization.getUserAccountDirectory().createUserAccount(Username, password, decorator, new DecoratorRole());
                JOptionPane.showMessageDialog(null, " decorator added,user added");

                populateDecoratorTable(organization);

            }
            txtemail.setText("");
            txtUsername.setText("");
            txtpassword.setText("");
            txtcharge.setText("");
            txtemail.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            jLabel4.setForeground(Color.BLACK);
        }

    }//GEN-LAST:event_addJButtonActionPerformed

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed
        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        if (organization != null) {
            if (organization.getName().equals(Organization.Type.Cleaning.getValue())) {
                //JOptionPane.showMessageDialog(null, organization.getName());

                populateCleaningTable(organization);
            } else if (organization.getName().equals(Organization.Type.Furnishing.getValue())) {
                populateDecoratorTable(organization);
            }
        }
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    private void txtemailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtemailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtemailActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtchargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtchargeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtchargeActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int row = organizationJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!", "get Request", JOptionPane.ERROR_MESSAGE);
        }
        String name = organizationJTable.getValueAt(row, 1).toString();

        Organization organization = (Organization) organizationJComboBox.getSelectedItem();
        if (organizationJComboBox.getSelectedItem().toString().equals(Organization.Type.Cleaning.getValue())) {

            //find cleaningstaff via user name
            CleaningStaff cleansf = organization.getCleaningStaffDirectory().findCleaningstaff(name);

            //remove this clean from list
            organization.getCleaningStaffDirectory().getCleaningStaffList().remove(cleansf);
            populateCleaningTable(organization);

            //remove this clean from userAccount so that the user couldn't log in
            UserAccount use = organization.getUserAccountDirectory().findUser(name);
            organization.getUserAccountDirectory().deleteUserAccount(use);
        } else if (organizationJComboBox.getSelectedItem().toString().equals(Organization.Type.Furnishing.getValue())) {

            //find cleaningstaff via user name
            Decorator decorator = organization.getDecoratorDirectory().findDecorator(name);

            //remove this customer from list
            organization.getDecoratorDirectory().getDecoratorList().remove(decorator);
            populateDecoratorTable(organization);

            //remove this customer from userAccount so that the user couldn't log in
            UserAccount use = organization.getUserAccountDirectory().findUser(name);
            organization.getUserAccountDirectory().deleteUserAccount(use);

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton backJButton1;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JTable organizationJTable;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtcharge;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtpassword;
    // End of variables declaration//GEN-END:variables
}
